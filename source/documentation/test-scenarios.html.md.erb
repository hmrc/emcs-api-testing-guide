---
title: Test scenarios
weight: 40
---

# Test scenarios
<%= partial 'documentation/partials/google_tag_manager_js' %>
You should test the following scenarios to make sure your software is compatible with EMCS API.

## Endpoint: Submit a new draft excise movement

You should test [this endpoint](/api-documentation/docs/api/service/excise-movement-control-system-api/1.0/oas/page#tag/Movements/operation/submitMovement) first.

To test this endpoint in the External Test environment, you will need to provide a request with an XML body that conforms to the [IE815 XML Schema](https://github.com/hmrc/excise-movement-control-system-api/blob/main/app/xsd/ie815.xsd). An [IE815 example XML](https://github.com/hmrc/excise-movement-control-system-api/blob/main/resources/public/api/conf/1.0/examples/IE815.xml) can be found on GitHub.

### Get messages

If you also want to test the endpoint ['Get all messages for an excise movement using the movementId'](#endpoint-get-all-messages-for-an-excise-movement-using-the-localreferencenumber), you must use one of these LRNs in the body of the XML message:

```
lrnie8158976912
lrnie8156540856
lrnie8155973812
lrnie8151695045
lrnie8155743934
lrnie8154968571
lrnie8151232757
lrnie8153786132
lrnie8158366950
lrnie8157359518
```

You should make sure the example LRNs are copied exactly, and are lowercase.

### Error cases

You can activate specific responses by passing in specific values in 2 ways:

1. As a local reference number (LRN). This is a legacy testing method and will be deprecated.
2. As a MessageIdentifier value in the XML header. This is the preferred method and will take the form below:

```
<urn:Message>
    <urn:Header>
      <urn1:MessageSender>token</urn1:MessageSender>
      <urn1:MessageRecipient>token</urn1:MessageRecipient>
      <urn1:DateOfPreparation>2008-09-29</urn1:DateOfPreparation>
      <urn1:TimeOfPreparation>00:18:33</urn1:TimeOfPreparation>
      <urn1:MessageIdentifier>[MESSAGE IDENTIFIER VALUE]</urn1:MessageIdentifier>
      <!--Optional:-->
      <urn1:CorrelationIdentifier>token</urn1:CorrelationIdentifier>
    </urn:Header>
</urn:Message>
```

You can send the following values to simulate responses:


| Message Identifier / LRN value     | 	Response                 |
|:-----------------------------|:--------------------------|
| SendA400                     | 400 Bad Request           |
| SendA404                     | 404 Not Found             |
| SendA500                     | 500 Internal Server Error |
| SendA503                     | 503 Service Unavailable   |
| Any other valid value        | 202 Accepted              |

A success response will take the form of 

```
{
  "status": "Accepted",
  "movementId": "cfdb20c7-d0b0-4b8b-a071-737d68dede5e",
  "localReferenceNumber": "LRNQA20230909022221",
  "consignorId": "GBWK002281023",
  "consigneeId": "GBWKQOZ8OVLYR"

}
```

A 400 Bad Request error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Json validation failed",
  "debugMessage": "user is missing but it is required",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```
If the XML is invalid, a 400 Bad Request error response will be returned in the form of

```
{
  "message": "Validation error(s) occurred",
  "errors": [
    {
      "errorCode": 8084,
      "errorMessage": "The Date of Dispatch you entered is incorrect. It must be today or later. Please amend your entry and resubmit.",
      "location": "/urn:IE815[1]/urn:Body[1]/urn:SubmittedDraftOfEADESAD[1]/urn:EadEsadDraft[1]/urn:DateOfDispatch[1]",
      "value": "2023-09-09"
    }
  ]
}
```

A 404 Not Found error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Received error response from server",
  "debugMessage": "Connection refused; nested exception is java.net.ConnectException: Connection refused",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

A 500 Internal Server Error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Invalid JSON structure",
  "debugMessage": "JSON parse error: Unexpected character",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

A 503 Service Unavailable error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "CIRCUIT_BREAKER - 815_CB is OPEN",
  "debugMessage": "CircuitBreaker '815_CB' is OPEN and does not permit further calls",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```
## Endpoint: Get excise movements

You must make sure you have first tested the [Submit a draft excise movement (IE815) endpoint](#endpoint-submit-a-new-draft-excise-movement), and received a success response.

You can test [this endpoint](/api-documentation/docs/api/service/excise-movement-control-system-api/1.0/oas/page#tag/Movements/operation/getAllMovements) in the External Test environment by calling `https://test-api.service.hmrc.gov.uk/customs/excise/movements?lrn=[YOUR_LRN]&ern=[YOUR_ERN]&arc=[YOUR_ARC]`.

A success response will take the form of 

```
[
  {
    "movementId" : "cfdb20c7-d0b0-4b8b-a071-737d68dede5e",
    "consignorId": "GBWK002281023",
    "localReferenceNumber": "LRNQA20230909022221",
    "consigneeId": "GBWKQOZ8OVLYR",
    "administrativeReferenceCode": "35WE3B5EDSYSZ86STVKH8",
    "status": "Accepted"
  },
  {
    "movementId" : "0055d33f-579e-4560-a3ee-03482d8d9dad",
    "consignorId": "GBWK002281023",
    "consigneeId": "GBWKQOZ8OVLYQ",
    "localReferenceNumber": "LRNQA20230909022224",
    "status": "None"
  }
]
```
## Endpoint: Get excise movement

You must make sure you have first tested the [Submit a draft excise movement (IE815) endpoint](#endpoint-submit-a-new-draft-excise-movement), and received a success response.

You can test [this endpoint](/api-documentation/docs/api/service/excise-movement-control-system-api/1.0/oas/page#tag/Movements/operation/getMovement) in the External Test environment by calling `https://test-api.service.hmrc.gov.uk/customs/excise/movements/[YOUR_MOVEMENT_ID]`.

A success response will take the form of

```
{
"movementId" : "cfdb20c7-d0b0-4b8b-a071-737d68dede5e",
"consignorId": "GBWK002281023",
"localReferenceNumber": "LRNQA20230909022221",
"consigneeId": "GBWKQOZ8OVLYR",
"administrativeReferenceCode": "35WE3B5EDSYSZ86STVKH8",
"status": "Accepted"
}
```

## Endpoint: Submit a message for an excise movement

You must make sure you have first tested the [Submit a draft excise movement (IE815) endpoint](#endpoint-submit-a-new-draft-excise-movement), and received a success response, before testing [this endpoint](/api-documentation/docs/api/service/excise-movement-control-system-api/1.0/oas/page#tag/Movements/operation/postMessage) in the External Test environment.

### IE818 - Report of receipt

You will need to provide a request with an XML body that conforms to the [IE818 XML Schema](https://github.com/hmrc/excise-movement-control-system-api/blob/main/app/xsd/ie818.xsd). An [IE818 example XML](https://github.com/hmrc/excise-movement-control-system-api/blob/main/resources/public/api/conf/1.0/examples/IE818.xml) can be found on GitHub.

You can activate specific responses by passing in specific values in 2 ways:

1. As a ComplementaryInformation value in the XML body. This is a legacy testing method and will be deprecated.
2. As a MessageIdentifier value in the XML header. This is the preferred method and will take the form below:

```
<urn:Message>
    <urn:Header>
      <urn1:MessageSender>token</urn1:MessageSender>
      <urn1:MessageRecipient>token</urn1:MessageRecipient>
      <urn1:DateOfPreparation>2008-09-29</urn1:DateOfPreparation>
      <urn1:TimeOfPreparation>00:18:33</urn1:TimeOfPreparation>
      <urn1:MessageIdentifier>[MESSAGE IDENTIFIER VALUE]</urn1:MessageIdentifier>
      <!--Optional:-->
      <urn1:CorrelationIdentifier>token</urn1:CorrelationIdentifier>
    </urn:Header>
</urn:Message>
```
You can send the following values to simulate responses:

| MessageIdentifier / ComplementaryInformation value    | 	Response                 |
|:-----------------------------|:--------------------------|
| SendA400                     | 400 Bad Request           |
| SendA404                     | 404 Not Found             |
| SendA500                     | 500 Internal Server Error |
| SendA503                     | 503 Service Unavailable   |
| Any other valid value        | 202 Accepted             |

A success response will have headers and a status, but will contain no body content.

A 400 Bad Request error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Json validation failed",
  "debugMessage": "user is missing but it is required",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

A 404 Not Found error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Received error response from server",
  "debugMessage": "Connection refused; nested exception is java.net.ConnectException: Connection refused",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

A 500 Internal Server Error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Invalid JSON structure",
  "debugMessage": "JSON parse error: Unexpected character",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

A 503 Service Unavailable error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "CIRCUIT_BREAKER - 815_CB is OPEN",
  "debugMessage": "CircuitBreaker '815_CB' is OPEN and does not permit further calls",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

### All other messages

Below is a list of messages that you can test, along with their relevant XML schema and example XMLs:

| Message | Schema link | Example XML |
| --- | --- | --- |
| IE810 - Cancellation | [IE810 XSD](https://github.com/hmrc/excise-movement-control-system-api/blob/main/app/xsd/ie810.xsd) | [IE810 example XML](https://github.com/hmrc/excise-movement-control-system-api/blob/main/resources/public/api/conf/1.0/examples/IE810.xml) |
| IE813 - Change of destination | [IE813 XSD](https://github.com/hmrc/excise-movement-control-system-api/blob/main/app/xsd/ie813.xsd) | [IE813 example XML](https://github.com/hmrc/excise-movement-control-system-api/blob/main/resources/public/api/conf/1.0/examples/IE813.xml) |
| IE819 - Alert or rejection of E-AD/E-SAD | [IE819 XSD](https://github.com/hmrc/excise-movement-control-system-api/blob/main/app/xsd/ie819.xsd) | [IE819 example XML](https://github.com/hmrc/excise-movement-control-system-api/blob/main/resources/public/api/conf/1.0/examples/IE819.xml) |
| IE837 - Explain delay to delivery | [IE837 XSD](https://github.com/hmrc/excise-movement-control-system-api/blob/main/app/xsd/ie837.xsd) | [IE837 example XML from consignor](https://github.com/hmrc/excise-movement-control-system-api/blob/main/resources/public/api/conf/1.0/examples/IE837_consignor.xml)<br></br>[IE837 example XML from consignee](https://github.com/hmrc/excise-movement-control-system-api/blob/main/resources/public/api/conf/1.0/examples/IE837_consignee.xml) |
| IE871 - Reason for shortage | [IE871 XSD](https://github.com/hmrc/excise-movement-control-system-api/blob/main/app/xsd/ie871.xsd) | [IE871 example XML](https://github.com/hmrc/excise-movement-control-system-api/blob/main/resources/public/api/conf/1.0/examples/IE810.xml) |

You will need to provide a request with an XML body that conforms to the relevant XML Schema.

Within the XML header you can activate specific responses by passing in specific MessageIdentifier values, as in the form below:

```
<urn:Message>
    <urn:Header>
      <urn1:MessageSender>token</urn1:MessageSender>
      <urn1:MessageRecipient>token</urn1:MessageRecipient>
      <urn1:DateOfPreparation>2008-09-29</urn1:DateOfPreparation>
      <urn1:TimeOfPreparation>00:18:33</urn1:TimeOfPreparation>
      <urn1:MessageIdentifier>[MESSAGE IDENTIFIER VALUE]</urn1:MessageIdentifier>
      <!--Optional:-->
      <urn1:CorrelationIdentifier>token</urn1:CorrelationIdentifier>
    </urn:Header>
</urn:Message>
```

You can send the following MessageIdentifier values to simulate responses:


| MessageIdentifier value     | 	Response                 |
|:-----------------------------|:--------------------------|
| SendA400                     | 400 Bad Request           |
| SendA404                     | 404 Not Found             |
| SendA500                     | 500 Internal Server Error |
| SendA503                     | 503 Service Unavailable   |
| Any other valid value        | 202 Accepted              |

A success response will have headers and a status, but will contain no body content.

A 400 Bad Request error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Json validation failed",
  "debugMessage": "user is missing but it is required",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

A 404 Not Found error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Received error response from server",
  "debugMessage": "Connection refused; nested exception is java.net.ConnectException: Connection refused",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

A 500 Internal Server Error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "Invalid JSON structure",
  "debugMessage": "JSON parse error: Unexpected character",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

A 503 Service Unavailable error response will take the form of

```
{
  "dateTime": "2021-12-17T09:30:47Z",
  "message": "CIRCUIT_BREAKER - 815_CB is OPEN",
  "debugMessage": "CircuitBreaker '815_CB' is OPEN and does not permit further calls",
  "emcsCorrelationId": "3e8dae97-b586-4cef-8511-68ac12da9028"
}
```

## Endpoint: Get all messages for an excise movement using the movementId

You must make sure you have first tested the [Submit a draft excise movement (IE815) endpoint](#endpoint-submit-a-new-draft-excise-movement) for each LRN in the below scenarios. You must have used one of the LRNs below in the body of the XML message, and received a success response.

You can test [this endpoint](/api-documentation/docs/api/service/excise-movement-control-system-api/1.0/oas/page#tag/Movements/operation/getAllMessages) in the External Test environment by calling `https://test-api.service.hmrc.gov.uk/customs/excise/movements/{movementId}/messages`.

The movementId is returned in response to a draft submission, and is a random unique UUID.
If you replace `{movementId}` in the URL with the movementID associated with a submission that was made with one of the following LRNs, you will can test the following scenarios and message responses:

| Scenario                           | Local Reference Number (LRN) | Response                                          |
| ---------------------------------- | ---------------------------- | ------------------------------------------------- |
| Failed Submission                   |	lrnie8158976912             |	IE704                                             |
| Successful Submission               |	lrnie8156540856             |	IE801                                             |
| Happy path delivered                |	lrnie8155973812             |	IE801, IE818                                      |
| Goods received but rejected         |	lrnie8151695045             |	IE801, IE818, IE871                               |
| Cancel a movement for an LRN        |	lrnie8155743934             |	IE801, IE810                                      |
| Change Consignee                    |	lrnie8154968571             |	IE801, IE813, IE801 (Sequence number incremented) |
| Consignee rejected before sent      |	lrnie8153786132             |	IE801, IE819                                      |
| Multiple LRN messages with duplicate|	lrnie8155743960             |	IE801, IE819, IE802, IE818, IE810                 |

You should make sure the example LRNs are copied exactly, and are lowercase when you make the draft submission. Using a movementId that is not associated with a valid LRN will return no messages.

A success response will take the form of 

```
[
  {
    "encodedMessage": "PElFODE1PjwhLS0gRXhhbXBsZSBJRTgxNSBtZXNzYWdlIC0tPjwvSUU4MTU+",
    "createdOn": "2023-10-30T15:36:08.985Z",
    "type": "IE815"
  },
  {
    "encodedMessage": "PElFODAxPjwhLS0gRXhhbXBsZSBJRTgwMSBtZXNzYWdlIC0tPjwvSUU4MDE+",
    "createdOn": "2023-10-28T15:36:08.985Z",
    "type": "IE801"
  }
]
```

## Endpoint: Get information relating to an excise trader

You can test [this endpoint]() in the External Test environment by calling `https://test-api.service.hmrc.gov.uk/customs/excise/traders`.

A request takes the form of

```
{
  "exciseTraderValidationRequest": {
      "exciseTraderRequest": {
          "exciseRegistrationNumber": "GBWK000000206",
          "entityGroup": "UK Record",
          "validateProductAuthorisationRequest": [
              {
                  "product": {
                      "exciseProductCode": "W300"
                  }
              },
              {
                  "product": {
                      "exciseProductCode": "S200"
                  }
              }
          ]
      }
  }
}
```

A 200 success response will take the form of

```
{
    "exciseTraderValidationResponse": {
        "validationTimeStamp": "2021-12-17T09:31:12Z",
        "exciseTraderResponse": {
            "exciseRegistrationNumber": "GBWK000000206",
            "entityGroup": "UK Record",
            "validTrader": true,
            "traderType": "1",
            "validateProductAuthorisationResponse": {
                "valid": true
            }
        }
    }
}
```

A 200 Invalid Trader error will take the form of

```
{
    "validationTimeStamp": "2021-12-17T09:31:12Z",
    "exciseTraderResponse": {
        "exciseRegistrationNumber": "GBWK000000000",
        "entityGroup": "UK Record",
        "validTrader": false,
        "errorCode": "6",
        "errorText": "Not Found"
    }
}
```

A 200 Invalid Product error will take the form of

```
{
    "validationTimeStamp": "2021-12-17T09:31:12Z",
    "exciseTraderResponse": {
        "exciseRegistrationNumber": "GBWK000000206",
        "entityGroup": "UK Record",
        "validTrader": true,
        "traderType": "1",
        "validateProductAuthorisationResponse": {
            "valid": false,
            "productError": [
                {
                    "exciseProductCode": "W300",
                    "errorCode": "2",
                    "errorText": "Unauthorised EPC"
                }
            ]
        }
    }
}
```

A 400 response with no body will occur for the following: 

- invalid request 
- badly formed JSON 
- mandatory fields are missing
- headers are missing. 

Mandatory headers are: 

- Accept
- Authorization
- Content-Type
- DateTime
- Source
- X-Correlation-Id
- X-Forwarded-Id

A 500 response can be triggered to represent internal server errors. This will have no body.


The following scenarios can be tested:

| Scenario                     | 	Response                 |
|:-----------------------------|:--------------------------|
|Send exciseRegistrationNumber GBWK000000000|	200 with Invalid Trader error|
|Send exciseProductCode as W300 or S200|	200 with Invalid Product error(s)|
|Send both the above|	200 with Invalid Trader and Invalid Product errors|
|Send exciseRegistrationNumber SendA400	|400 Bad Request with no message payload|
|Send exciseRegistrationNumber SendA500	|500 Internal Server Error with no message payload|
|Any other valid value|	200 Success with Valid Trader Response|